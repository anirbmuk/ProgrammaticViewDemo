package blog.anirbanm.prog.model.vo;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;

import oracle.jbo.Key;
import oracle.jbo.RangePagingDataFilter;
import oracle.jbo.ScrollableDataFilter;
import oracle.jbo.server.ProgrammaticViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 16 10:20:07 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesPVOImpl extends ProgrammaticViewObjectImpl {
    
    private Integer departmentId = -1;

    public Integer getDepartmentId() {
        return departmentId;
    }

    public void setDepartmentId(Integer departmentId) {
        this.departmentId = departmentId;
    }
    
    private Connection connection = null;
    private CallableStatement stmt = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public EmployeesPVOImpl() {
    }

    /**
     * getRangePagingData - for custom java data source support.
     */
    public Collection<Object> getRangePagingData(RangePagingDataFilter filter) {
        Collection<Object> value = super.getRangePagingData(filter);
        return value;
    }

    /**
     * retrieveDataByKey - for custom java data source support.
     */
    public Collection<Object> retrieveDataByKey(Key key, int size) {
        Collection<Object> value = super.retrieveDataByKey(key, size);
        return value;
    }

    /**
     * getScrollableData - for custom java data source support.
     */
    public Collection<Object> getScrollableData(ScrollableDataFilter filter) {
        ArrayList<Object> rows = new ArrayList<Object>();
        final ResultSet rset = fetchEmployees();
        try {
            while (rset.next()) {
                HashMap<Object, Object> row = new HashMap<Object, Object>();
                row.put("EmployeeId", rset.getInt(1));
                row.put("FirstName", rset.getString(2));
                row.put("LastName", rset.getString(3));
                row.put("Email", rset.getString(4));
                row.put("Salary", rset.getBigDecimal(5));
                rows.add(row);
            }
        } catch (SQLException e) {
            System.out.println("SQLException");
        }

        return rows;
    }
    
    private ResultSet fetchEmployees() {
        ResultSet rset = null;
        final String EMPLOYEE_SQL = "BEGIN HR_PKG.P_GET_EMPLOYEES(?, ?); END;";
        try {
            if (connection == null || connection.isClosed()) {
                connection = getDBTransaction().createCallableStatement(EMPLOYEE_SQL, 0).getConnection();
            }
            if (stmt == null || stmt.isClosed()) {
                stmt = getDBTransaction().createCallableStatement(EMPLOYEE_SQL, 0);
            }
            stmt.setInt(1, getDepartmentId());
            stmt.registerOutParameter(2, OracleTypes.CURSOR);
            stmt.execute();
            
            rset = (ResultSet) stmt.getObject(2);
        } catch (SQLException e) {
            System.out.println("SQLException");
        }
        return rset;
    }
}

